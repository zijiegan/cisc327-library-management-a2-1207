name: ci

on:
  push:
  pull_request:

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Upgrade pip
        run: python -m pip install --upgrade pip

      - name: Install dependencies
        run: |
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install pytest pytest-cov pytest-order

      - name: Initialize database and seed data
        shell: bash
        run: |
          python - <<'PY'
          # Create a deterministic SQLite DB for tests and seed rows
          # so title-partial search and add-book tests are reliable.

          import sqlite3

          DB = "library.db"
          conn = sqlite3.connect(DB)
          c = conn.cursor()

          # Create table with a UNIQUE isbn constraint (id is auto-increment).
          c.execute("""
          CREATE TABLE IF NOT EXISTS books (
              id INTEGER PRIMARY KEY AUTOINCREMENT,
              title TEXT NOT NULL,
              author TEXT NOT NULL,
              isbn TEXT NOT NULL UNIQUE,
              total_copies INTEGER NOT NULL,
              available_copies INTEGER NOT NULL
          )
          """)

          # Make sure any ISBN the tests will insert does NOT exist beforehand.
          # test_add_book_valid inserts: 1234567890123
          for isbn in ("1234567890123",):
              c.execute("DELETE FROM books WHERE isbn = ?", (isbn,))

          # Base seed used by search tests (case-insensitive title search on "great").
          seed_rows = [
              ("1984", "George Orwell", "9780451524935", 5, 5),
              ("Harry Potter and the Philosopher's Stone", "J.K. Rowling", "9780747532699", 5, 5),
              ("To Kill a Mockingbird", "Harper Lee", "9780061120084", 5, 5),
              # This row is required for test_search_by_title_partial_case_insensitive
              ("The Great Gatsby", "F. Scott Fitzgerald", "9780743273565", 5, 5),
          ]

          # Insert if missing; do not overwrite existing values unintentionally.
          for row in seed_rows:
              c.execute(
                  "INSERT OR IGNORE INTO books (title, author, isbn, total_copies, available_copies) "
                  "VALUES (?, ?, ?, ?, ?)",
                  row
              )

          # Ensure the 'The Great Gatsby' row exists with the expected values.
          # (Some environments might have a stale/partial row; we enforce it here.)
          c.execute("""
              UPDATE books
                 SET title = ?, author = ?, total_copies = ?, available_copies = ?
               WHERE isbn = ?
          """, ("The Great Gatsby", "F. Scott Fitzgerald", 5, 5, "9780743273565"))

          conn.commit()
          conn.close()
          PY



      - name: Run tests
        run: pytest -q
        